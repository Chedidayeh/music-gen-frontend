// This is your Prisma schema file,
// Docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  likes         Like[]
  songs         Song[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 


model Song {
  id               String     @id @default(uuid())
  title            String
  audioPath        String?
  thumbnailPath    String?
  status           String     @default("queued")
  instrumental     Boolean    @default(false)
  prompt           String?
  lyrics           String?
  fullDescribedSong String?
  describedLyrics  String?
  guidanceScale    Float?
  inferStep        Float?
  audioDuration    Float?
  seed             Float?
  published        Boolean    @default(false)
  listenCount      Int        @default(0)

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  likes            Like[]
  categories       Category[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([audioPath])
}

model Like {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  song   Song @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String

  @@id([userId, songId])
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  songs Song[]
}

